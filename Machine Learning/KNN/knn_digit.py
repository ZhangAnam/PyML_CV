from __future__ import divisionimport numpy as npfrom KNN.knn import Distance, data_from_fileimport osfrom KNN import knnfrom numpy import dtypeclass BinaryDistance(Distance):    def dist(self, X, Y):        return sum(np.bitwise_xor(X , Y))def binaryData_from_file(filename):    f = open(filename)    try:        text = f.readlines()        fristLine = text[0].strip()        elementSize = len(fristLine)        mat = []        for line in text:            line = line.strip()            for i in range(elementSize):                mat.append(int(line[i]))    finally:        f.close()    return np.array(mat,dtype=np.uint8)def dir2mat(path):    filelist = os.listdir(path)    dataset = np.zeros((len(filelist), 1024))    label = np.zeros(len(filelist))    index = 0    for filename in filelist:        text , ext = filename.split('.')        if ext == "txt":            record = binaryData_from_file(path + '/' + filename)            dataset[index, :] = record[:]            text = text.split('_')[0]            label[index] = text            index += 1    return np.array(dataset,dtype=np.uint8) , np.array(label,dtype=np.uint8)if __name__ == "__main__":    dataset , label = dir2mat("./trainingDigits")    datatest , labeltest = dir2mat("./testDigits")    labellearn = np.array([knn.classify_knn(inX, dataset, label, 5, BinaryDistance()) for inX in datatest],dtype=np.uint8)    testNum = labellearn.shape[0]        trueValue = 0    for i in range(testNum):        print("the classfiy value %d , real value %d" % (labellearn[i] , labeltest[i]))        if(labellearn[i] == labeltest[i]):            trueValue += 1    print("the total error is %f" % (1 - trueValue / testNum))